import { memo, useMemo, useCallback, useState, useEffect } from "react";
import { Card, Text, Button, tokens } from "@fluentui/react-components";
import { DocumentEditRegular, SparkleRegular, PlayRegular, WarningRegular } from "@fluentui/react-icons";
import { useCardStyles, useSettingsStyles } from "../../../styles/commonStyles";
import { AI_ENGINE_OPTIONS } from "../../../constants/scriptSettings";
import { generateAudioAndSubtitles } from "../../../utils/audioSubtitleGenerator";

// Î°úÎî© Ïï†ÎãàÎ©îÏù¥ÏÖò Ïä§ÌÉÄÏùº
const loadingAnimation = `
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.6; }
  }

  .loading-text {
    animation: pulse 2s ease-in-out infinite;
    color: rgba(102, 126, 234, 0.8);
    display: inline-flex;
    align-items: center;
  }
`;

// Ïä§ÌÖù Ïù¥Î¶Ñ Î≥ÄÌôò
function getStepDisplayName(step) {
  const stepNames = {
    script: "ÎåÄÎ≥∏ ÏÉùÏÑ± Ï§ë...",
    audio: "ÏùåÏÑ± Ìï©ÏÑ± Ï§ë...",
    images: "Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ± Ï§ë...",
    video: "ÏòÅÏÉÅ Ìï©ÏÑ± Ï§ë...",
    subtitle: "ÏûêÎßâ ÏÉùÏÑ± Ï§ë...",
  };
  return stepNames[step] || step;
}

const ActionCard = memo(
  ({
    selectedMode,
    form,
    isLoading,
    fullVideoState,
    setFullVideoState,
    voices,
    api,
    runGenerate,
    setError,
    setIsLoading,
    setDoc,
    chunkProgress,
    centered = false,
  }) => {
    const cardStyles = useCardStyles();
    const settingsStyles = useSettingsStyles();

    // ÏûëÏóÖ Ï∑®ÏÜåÎ•º ÏúÑÌïú AbortController Í¥ÄÎ¶¨
    const [currentOperation, setCurrentOperation] = useState(null);

    // Ïã§ÏãúÍ∞Ñ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú ÏÉÅÌÉú
    const [remainingTime, setRemainingTime] = useState("");

    // Ïã§ÏãúÍ∞Ñ ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ (1Ï¥àÎßàÎã§)
    useEffect(() => {
      if (!fullVideoState?.isGenerating || !fullVideoState?.startTime) {
        setRemainingTime("");
        return;
      }

      const updateTime = () => {
        const now = new Date();
        const startTime = new Date(fullVideoState.startTime);
        const elapsedSec = Math.floor((now - startTime) / 1000);

        const durationMin = form?.durationMin || 3;
        const currentStep = fullVideoState.currentStep;

        // Í∞Å Îã®Í≥ÑÎ≥Ñ ÏòàÏÉÅ ÏãúÍ∞Ñ (Ï¥à)
        const scriptEstimatedSec = durationMin <= 3 ? 40 : durationMin <= 5 ? 60 : durationMin <= 10 ? 90 : 120;
        const audioEstimatedSec = durationMin * 60 * 0.3;
        const subtitleEstimatedSec = 10;
        const totalEstimatedSec = scriptEstimatedSec + audioEstimatedSec + subtitleEstimatedSec;

        // Ï†ÑÏ≤¥ ÎÇ®ÏùÄ ÏãúÍ∞Ñ = Ï†ÑÏ≤¥ ÏòàÏÉÅ ÏãúÍ∞Ñ - Í≤ΩÍ≥º ÏãúÍ∞Ñ
        const remainingSec = Math.max(0, totalEstimatedSec - elapsedSec);
        const remainingMin = Math.floor(remainingSec / 60);
        const remainingSecOnly = Math.floor(remainingSec % 60);

        setRemainingTime(`${String(remainingMin).padStart(2, "0")}:${String(remainingSecOnly).padStart(2, "0")}`);
      };

      updateTime(); // Ï¶âÏãú Ïã§Ìñâ
      const interval = setInterval(updateTime, 1000); // 1Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏

      return () => clearInterval(interval);
    }, [fullVideoState?.isGenerating, fullVideoState?.startTime, form?.durationMin]);

    // ÏïàÏ†ÑÌïú Ìèº Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
    const safeForm = useMemo(
      () => ({
        topic: form?.topic || "",
        referenceScript: form?.referenceScript || "",
        promptName: form?.promptName || "",
        aiEngine: form?.aiEngine || "",
      }),
      [form?.topic, form?.referenceScript, form?.promptName, form?.aiEngine]
    );

    // Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î©îÎ™®Ìôî
    const validationState = useMemo(() => {
      const hasValidTopic = safeForm.topic.trim();
      const hasValidReference = safeForm.referenceScript.trim() && safeForm.referenceScript.trim().length >= 50;
      const isReferenceOnlyMode = hasValidReference && !hasValidTopic;

      const errors = [];
      if (!hasValidTopic && !hasValidReference) {
        errors.push("‚Ä¢ ÏòÅÏÉÅ Ï£ºÏ†ú ÏûÖÎ†• ÎòêÎäî Î†àÌçºÎü∞Ïä§ ÎåÄÎ≥∏ ÏûÖÎ†• (50Ïûê Ïù¥ÏÉÅ)");
      }
      if (!isReferenceOnlyMode && !safeForm.promptName) {
        errors.push("‚Ä¢ ÎåÄÎ≥∏ ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏ ÏÑ†ÌÉù");
      }

      return {
        hasValidTopic,
        hasValidReference,
        isReferenceOnlyMode,
        errors,
      };
    }, [safeForm.topic, safeForm.referenceScript, safeForm.promptName]);

    const isDisabled = useMemo(
      () => isLoading || validationState.errors.length > 0 || fullVideoState?.isGenerating,
      [isLoading, validationState.errors.length, fullVideoState?.isGenerating]
    );

    const selectedEngine = useMemo(() => AI_ENGINE_OPTIONS.find((engine) => engine.key === safeForm.aiEngine), [safeForm.aiEngine]);

    // Î°úÍ∑∏ Ï∂îÍ∞Ä Ìó¨Ìçº Ìï®Ïàò
    const addLog = useCallback(
      (message, type = "info") => {
        const timestamp = new Date().toLocaleTimeString();
        setFullVideoState((prev) => ({
          ...prev,
          logs: [...(prev.logs || []), { timestamp, message, type }],
        }));
      },
      [setFullVideoState]
    );

    // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìó¨Ìçº Ìï®Ïàò
    const updateFullVideoState = useCallback(
      (updates) => {
        setFullVideoState((prev) => ({
          ...prev,
          ...updates,
          logs: updates.logs ? [...(prev.logs || []), ...updates.logs] : prev.logs,
        }));
      },
      [setFullVideoState]
    );

    // ÎåÄÎ≥∏ ÏÉùÏÑ± Î™®Îìú Ïã§Ìñâ Ìï®Ïàò
    const runScriptMode = useCallback(
      async (formData) => {
        // Í∏∞Ï°¥ ÏûëÏóÖÏù¥ ÏßÑÌñâ Ï§ëÏù¥Î©¥ Ï∑®ÏÜå
        if (currentOperation) {
          currentOperation.abort();
        }

        const abortController = new AbortController();
        setCurrentOperation(abortController);

        setError("");
        setIsLoading(true);
        setDoc(null);

        setFullVideoState({
          isGenerating: true,
          mode: "script_mode",
          currentStep: "script",
          progress: { script: 0, audio: 0, images: 0, video: 0, subtitle: 0 },
          results: { script: null, audio: null, images: [], video: null },
          streamingScript: "",
          error: null,
          startTime: new Date(),
          logs: [],
        });

        try {
          // Ï†ÑÏó≠ ÏÑ§Ï†ïÏóêÏÑú ÏòÅÏÉÅ Ìè¥Îçî Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞
          let videoSaveFolder = null;
          if (!window.api?.getSetting) {
            throw new Error("APIÎ•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.");
          }

          try {
            const videoFolderSettingResult = await window.api.getSetting("videoSaveFolder");
            const videoFolderSetting = videoFolderSettingResult?.value || videoFolderSettingResult;
            if (videoFolderSetting) {
              videoSaveFolder = videoFolderSetting;
            }
          } catch (settingError) {
            console.warn("‚ö†Ô∏è ÎåÄÎ≥∏ Î™®Îìú - Ï†ÑÏó≠ ÏÑ§Ï†ï ÏùΩÍ∏∞ Ïã§Ìå®:", settingError.message);
          }

          addLog("üìù AI ÎåÄÎ≥∏ ÏÉùÏÑ± Ï§ë...");
          const scriptResult = await runGenerate(formData);

          if (scriptResult && scriptResult.scenes && Array.isArray(scriptResult.scenes) && scriptResult.scenes.length > 0) {
            setFullVideoState((prev) => ({
              ...prev,
              currentStep: "audio",
              progress: { ...prev.progress, script: 100, audio: 0 },
            }));

            await generateAudioAndSubtitles(scriptResult, "script_mode", {
              form,
              voices,
              setFullVideoState,
              api,
              addLog,
            });
          } else {
            throw new Error("ÎåÄÎ≥∏Ïù¥ ÏÉùÏÑ±ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Î®ºÏ†Ä ÎåÄÎ≥∏ÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.");
          }
        } catch (error) {
          if (error.name === "AbortError") {
            addLog("‚èπÔ∏è ÏûëÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.", "info");
          } else {
            console.error("ÎåÄÎ≥∏ ÏÉùÏÑ± Ïò§Î•ò:", error);
            setError(error.message);
          }
        } finally {
          setIsLoading(false);
          setCurrentOperation(null);
        }
      },
      [currentOperation, setError, setIsLoading, setDoc, setFullVideoState, addLog, runGenerate, form, voices, api]
    );

    // Î™®Îìú ÏÑ§Ï†ï Î©îÎ™®Ìôî
    const modes = useMemo(
      () => ({
        script_mode: {
          title: "üìù ÎåÄÎ≥∏ ÏÉùÏÑ± (Í∏∞Î≥∏ Î™®Îìú)",
          description: "Îπ†Î•¥Í≤å ÎåÄÎ≥∏Í≥º ÏùåÏÑ±ÏùÑ ÏÉùÏÑ±ÌïòÏó¨ ÏΩòÌÖêÏ∏† Ï†úÏûëÏùÑ ÏãúÏûëÌï©ÎãàÎã§",
          buttonText: "üìù ÎåÄÎ≥∏ ÏÉùÏÑ± ÏãúÏûë",
          loadingText: "ÎåÄÎ≥∏ ÏÉùÏÑ± Ï§ë",
          completedText: "‚úÖ ÎåÄÎ≥∏ ÏÉùÏÑ± ÏôÑÎ£å",
          icon: DocumentEditRegular,
          gradient: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          estimatedTime: "3-5Î∂Ñ",
          outputFormat: "ÎåÄÎ≥∏ ÌÖçÏä§Ìä∏ + ÏùåÏÑ± ÌååÏùº + SRT ÏûêÎßâ",
          onGenerate: () => runScriptMode(form),
        },
      }),
      [runScriptMode, form]
    );

    const currentMode = useMemo(() => modes[selectedMode], [modes, selectedMode]);
    const Icon = currentMode?.icon;

    // Ïä§ÌÉÄÏùº Î©îÎ™®Ìôî
    const styles = useMemo(
      () => ({
        warningCard: {
          textAlign: "center",
          padding: tokens.spacingVerticalXL,
        },
        centeredCard: {
          background: currentMode?.gradient || "transparent",
          border: "none",
          borderRadius: 12,
          padding: tokens.spacingVerticalS,
          color: "white",
          boxShadow: "0 8px 32px rgba(0,0,0,0.15)",
          textAlign: "center",
          height: "fit-content",
          display: "flex",
          flexDirection: "column",
        },
        buttonContainer: {
          background: "rgba(255,255,255,0.1)",
          borderRadius: 8,
          padding: 4,
          gap: 4,
        },
        button: {
          width: "100%",
          padding: "10px 16px",
          fontSize: "14px",
          fontWeight: "bold",
          backgroundColor: "rgba(255,255,255,0.9)",
          color: "#333",
          border: "none",
          boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
        },
        descriptionContainer: {
          marginTop: tokens.spacingVerticalXS,
          padding: tokens.spacingVerticalXS,
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
        },
      }),
      [currentMode?.gradient]
    );

    if (!selectedMode || !currentMode) {
      return (
        <Card className={cardStyles.settingsCard} style={styles.warningCard}>
          <WarningRegular style={{ fontSize: 48, color: tokens.colorNeutralForeground3, marginBottom: tokens.spacingVerticalM }} />
          <Text size={400} style={{ color: tokens.colorNeutralForeground3 }}>
            ÏÉùÏÑ± Î™®ÎìúÎ•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî
          </Text>
        </Card>
      );
    }

    // Ï§ëÏïô Î∞∞Ïπò ÏµúÏ†ÅÌôî Î†àÏù¥ÏïÑÏõÉ
    if (centered) {
      return (
        <>
          <style>{loadingAnimation}</style>
          <Card style={styles.centeredCard}>
            {/* Ìó§Îçî */}
            <div style={{ marginBottom: tokens.spacingVerticalXS }}>
              <Text size={300} weight="semibold" style={{ color: "white" }}>
                {currentMode.title}
              </Text>
            </div>

            {/* Ïã§Ìñâ Î≤ÑÌäº ÏòÅÏó≠ */}
            <div style={styles.buttonContainer}>
              <Button
                appearance="primary"
                icon={fullVideoState.isGenerating ? <SparkleRegular /> : <PlayRegular />}
                onClick={currentMode.onGenerate}
                disabled={isDisabled}
                style={styles.button}
              >
                <span className={fullVideoState.isGenerating && fullVideoState.currentStep !== "completed" ? "loading-text" : ""}>
                  {fullVideoState.currentStep === "completed"
                    ? "üîÑ ÏÉà ÎåÄÎ≥∏ ÏÉùÏÑ±"
                    : chunkProgress
                    ? `Ï≤≠ÌÅ¨ ${chunkProgress.current}/${chunkProgress.total} ÏÉùÏÑ± Ï§ë... (${chunkProgress.progress}%)`
                    : fullVideoState.isGenerating && fullVideoState.currentStep && remainingTime
                    ? `${getStepDisplayName(fullVideoState.currentStep)} ${remainingTime}`
                    : fullVideoState.isGenerating
                    ? currentMode.loadingText
                    : currentMode.buttonText}
                </span>
              </Button>

              {/* Ï§ëÏßÄ Î≤ÑÌäº (ÏÉùÏÑ± Ï§ëÏùº ÎïåÎßå ÌëúÏãú) */}
              {fullVideoState.isGenerating && fullVideoState.currentStep !== "completed" && (
                <Button
                  appearance="outline"
                  onClick={() => {
                    // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî (Ïª®Ìéå ÏóÜÏù¥ Î∞îÎ°ú Ïã§Ìñâ)
                    setFullVideoState(prev => ({
                      ...prev,
                      isGenerating: false,
                      currentStep: "idle",
                      progress: { script: 0, audio: 0, images: 0, video: 0, subtitle: 0 }
                    }));
                    setIsLoading(false);
                    setDoc(null);
                  }}
                  style={{
                    width: "100%",
                    padding: "10px 16px",
                    fontSize: "14px",
                    fontWeight: "bold",
                    backgroundColor: "transparent",
                    color: "white",
                    border: "2px solid white",
                    boxShadow: "none",
                    transition: "all 0.2s ease",
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = "rgba(220, 53, 69, 0.2)";
                    e.currentTarget.style.borderColor = "#dc3545";
                    e.currentTarget.style.color = "#ff6b6b";
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = "transparent";
                    e.currentTarget.style.borderColor = "white";
                    e.currentTarget.style.color = "white";
                  }}
                >
                  ‚èπÔ∏è ÏÉùÏÑ± Ï§ëÏßÄ
                </Button>
              )}
            </div>


          {/* ÏÑ§Î™Ö ÏòÅÏó≠ */}
          <div style={styles.descriptionContainer}>
            {fullVideoState.error ? (
              <Text style={{ color: "#ffcccc", fontWeight: 600, fontSize: "14px", lineHeight: "1.4" }}>
                ‚ùå Ïò§Î•ò: {fullVideoState.error}
              </Text>
            ) : fullVideoState.currentStep === "completed" ? (
              <Text style={{ color: "#ccffcc", fontWeight: 600, fontSize: "14px", lineHeight: "1.4" }}>
                ‚úÖ ÎåÄÎ≥∏ ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§! ÏÉàÎ°úÏö¥ Ï£ºÏ†úÎ°ú Îã§Ïãú ÏÉùÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?
              </Text>
            ) : (
              <Text style={{ color: "rgba(255,255,255,0.95)", fontSize: "14px", lineHeight: "1.4" }}>
                {currentMode.description}
              </Text>
            )}
          </div>
        </Card>
        </>
      );
    }

    // Í∏∞Î≥∏ Î†àÏù¥ÏïÑÏõÉ (ÏÇ¨Ïö© ÏïàÌï® - centeredÎßå ÏÇ¨Ïö©)
    return null;
  }
);

// Ïª¥Ìè¨ÎÑåÌä∏ Ïù¥Î¶Ñ ÏÑ§Ï†ï (Í∞úÎ∞úÏûê ÎèÑÍµ¨ÏóêÏÑú ÎîîÎ≤ÑÍπÖ Ìé∏Ïùò)
ActionCard.displayName = "ActionCard";

export default ActionCard;
