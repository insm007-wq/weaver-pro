// src/pages/ThumbnailGenerator.jsx
import { useEffect, useLayoutEffect, useRef, useState } from "react";
import { ErrorBoundary } from "./ErrorBoundary";
import {
  Button,
  Card,
  Text,
  Title1,
  Title2,
  Title3,
  Body1,
  Body2,
  Caption1,
  Textarea,
  Dropdown,
  Option,
  Divider,
  makeStyles,
  shorthands,
  tokens,
  Spinner,
  MessageBar,
  MessageBarBody,
  Badge,
  Field,
  Label,
  ProgressBar,
} from "@fluentui/react-components";
import {
  LightbulbRegular,
  DeleteRegular,
  ArrowDownloadRegular,
  OpenRegular,
  ImageRegular,
  SparkleRegular,
  DismissCircleRegular,
  InfoRegular,
  TimerRegular,
  SettingsRegular,
} from "@fluentui/react-icons";
import { DEFAULT_TEMPLATE as IMPORTED_DEFAULT_TEMPLATE } from "./scriptgen/constants";

const useStyles = makeStyles({
  container: {
    maxWidth: "1200px",
    ...shorthands.margin("0", "auto"),
    ...shorthands.padding(tokens.spacingVerticalXL, tokens.spacingHorizontalL),
    display: "flex",
    flexDirection: "column",
    ...shorthands.gap(tokens.spacingVerticalL),
  },
  toastContainer: {
    position: "fixed",
    top: tokens.spacingVerticalL,
    right: tokens.spacingHorizontalL,
    zIndex: 1000,
  },
  pageHeader: {
    ...shorthands.margin(0, 0, tokens.spacingVerticalL),
  },
  pageTitle: {
    display: "flex",
    alignItems: "center",
    columnGap: tokens.spacingHorizontalM,
  },
  pageDesc: {
    color: tokens.colorNeutralForeground3,
    marginTop: tokens.spacingVerticalXS,
    fontSize: tokens.fontSizeBase300,
  },
  hairline: {
    ...shorthands.borderBottom("1px", "solid", tokens.colorNeutralStroke2),
    marginTop: tokens.spacingVerticalM,
  },
  sectionLead: {
    marginBottom: tokens.spacingVerticalL,
  },
  settingsCard: {
    backgroundColor: tokens.colorNeutralBackground1,
    ...shorthands.border("1px", "solid", tokens.colorNeutralStroke2),
    ...shorthands.borderRadius(tokens.borderRadiusLarge),
    ...shorthands.padding(tokens.spacingVerticalL),
    boxShadow: "0 1px 4px rgba(0, 0, 0, 0.06)",
    marginBottom: tokens.spacingVerticalL,
  },
  templateActions: {
    display: "flex",
    gap: tokens.spacingHorizontalS,
  },
  uploadArea: {
    border: `2px dashed ${tokens.colorNeutralStroke1}`,
    borderRadius: tokens.borderRadiusMedium,
    padding: tokens.spacingVerticalXL,
    textAlign: "center",
    cursor: "pointer",
    transition: "all 0.2s ease",
    "&:hover": {
      ...shorthands.borderColor(tokens.colorBrandStroke1),
      backgroundColor: tokens.colorBrandBackground2,
    },
  },
  uploadAreaDragOver: {
    ...shorthands.borderColor(tokens.colorBrandStroke1),
    backgroundColor: tokens.colorBrandBackground2,
  },
  previewContainer: {
    display: "flex",
    alignItems: "center",
    gap: tokens.spacingHorizontalM,
  },
  previewImage: {
    width: "200px",
    height: "200px",
    objectFit: "cover",
    borderRadius: tokens.borderRadiusMedium,
    border: `2px solid ${tokens.colorNeutralStroke1}`,
    boxShadow: tokens.shadow8,
  },
  previewInfo: {
    textAlign: "left",
    flex: 1,
  },
  optionsGrid: {
    display: "grid",
    gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
    gap: tokens.spacingHorizontalL,
    marginBottom: tokens.spacingVerticalL,
  },
  analysisResult: {
    marginTop: tokens.spacingVerticalM,
  },
  resultsGrid: {
    display: "grid",
    gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
    gap: tokens.spacingHorizontalL,
  },
  resultCard: {
    overflow: "hidden",
  },
  resultImage: {
    width: "100%",
    height: "auto",
    objectFit: "cover",
  },
  resultFooter: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    padding: tokens.spacingVerticalM,
  },
  resultActions: {
    display: "flex",
    gap: tokens.spacingHorizontalS,
  },
  promptDisplay: {
    backgroundColor: tokens.colorNeutralBackground2,
    border: `1px solid ${tokens.colorNeutralStroke1}`,
    borderRadius: tokens.borderRadiusSmall,
    padding: tokens.spacingVerticalM,
    fontFamily: tokens.fontFamilyMonospace,
    fontSize: tokens.fontSizeBase200,
    whiteSpace: "pre-wrap",
    marginTop: tokens.spacingVerticalM,
  },
  tipCard: {
    marginTop: tokens.spacingVerticalS,
  },
});

function TipCard({ children, className = "" }) {
  return (
    <MessageBar intent="warning" className={className}>
      <MessageBarBody>
        <LightbulbRegular /> {children}
      </MessageBarBody>
    </MessageBar>
  );
}

/** ÏóÖÎ°úÎìú Ï†ïÏ±Ö */
const MAX_UPLOAD_MB = 10; // 10MBÎ°ú Ï†úÌïú

/** ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø Í∏∞Î≥∏Í∞í */
const DEFAULT_TEMPLATE = IMPORTED_DEFAULT_TEMPLATE;

/** ÌíàÏßà ÏÑ§Ï†ï ÌîÑÎ¶¨ÏÖã */
const QUALITY_PRESETS = [
  {
    value: "fast",
    label: "Îπ†Î•∏ ÏÉùÏÑ±",
    steps: 20,
    cfg: 7,
    description: "Îπ†Î•∏ ÏÜçÎèÑ, Ï†ÅÏ†àÌïú ÌíàÏßà",
    estimatedTime: "ÏïΩ 10-15Ï¥à",
  },
  {
    value: "balanced",
    label: "Í∑†Ìòï Ïû°Ìûå",
    steps: 30,
    cfg: 8,
    description: "ÏÜçÎèÑÏôÄ ÌíàÏßàÏùò Í∑†Ìòï",
    estimatedTime: "ÏïΩ 20-30Ï¥à",
  },
  {
    value: "quality",
    label: "ÏµúÍ≥† ÌíàÏßà",
    steps: 50,
    cfg: 10,
    description: "ÏµúÏÉÅÏùò ÌíàÏßà, ÎäêÎ¶∞ ÏÜçÎèÑ",
    estimatedTime: "ÏïΩ 40-60Ï¥à",
  },
];

function ThumbnailGenerator() {
  const styles = useStyles();
  const fileInputRef = useRef(null);

  /** üîí Í≥†Ï†ï Ìè≠ Ï∏°Ï†ï/Ï†ÄÏû• (Î¶¨ÌîåÎ¶¨ÏºÄÏù¥Ìä∏ Í∏∞Ï§Ä) */
  const containerRef = useRef(null);
  const [fixedWidthPx, setFixedWidthPx] = useState(null);

  /** Í≥µÌÜµ ÏÉÅÌÉú */
  const [provider, setProvider] = useState("replicate"); // 'replicate' | 'gemini'
  const [metaTemplate, setMetaTemplate] = useState("");
  const [templateLoading, setTemplateLoading] = useState(true);
  const [toast, setToast] = useState(null);
  const [defaultEngineLoaded, setDefaultEngineLoaded] = useState(false);

  /** ÌîÑÎ°úÍ∑∏Î†àÏä§ ÏÉÅÌÉú */
  const [progress, setProgress] = useState({
    phase: "idle", // 'idle' | 'analyzing' | 'generating' | 'processing' | 'completed'
    percentage: 0,
    message: "",
    current: 0,
    total: 0,
  });

  /** ÌíàÏßà ÏÑ§Ï†ï */
  const [qualityPreset, setQualityPreset] = useState("balanced");

  /** Replicate Ï†ÑÏö© */
  const [prompt, setPrompt] = useState(""); // ‚¨ÖÔ∏è ReplicateÏùº ÎïåÎßå ÏÇ¨Ïö©
  const [mode, setMode] = useState("dramatic"); // dramatic | calm

  /** Í≥µÌÜµ ÏòµÏÖò */
  const [count, setCount] = useState(1);

  /** Imagen3 Ï†ÑÏö© ÏòµÏÖò */
  const [aspectRatio, setAspectRatio] = useState("16:9"); // "1:1" | "3:4" | "4:3" | "9:16" | "16:9"

  /** Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ(Î∂ÑÏÑùÏö©) */
  const [imageFile, setImageFile] = useState(null);
  const [imagePreview, setImagePreview] = useState(null); // ObjectURL
  const previewUrlRef = useRef(null); // revoke Í¥ÄÎ¶¨Ïö©

  const [loading, setLoading] = useState(false);
  const [dragOver, setDragOver] = useState(false);

  // Í≤∞Í≥º
  const [results, setResults] = useState([]); // [{url}]
  const [usedPrompt, setUsedPrompt] = useState("");
  const [tookMs, setTookMs] = useState(null);
  const [estimatedTime, setEstimatedTime] = useState(null);

  // Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù(Anthropic) Í≤∞Í≥º
  const [fxLoading, setFxLoading] = useState(false);
  const [fxErr, setFxErr] = useState("");
  const [fxEn, setFxEn] = useState("");
  const [fxKo, setFxKo] = useState("");
  const [fxAnalysis, setFxAnalysis] = useState(""); // Íµ¨ÎèÑ Î∂ÑÏÑù Î∞è Í∞úÏÑ†Ï†ê

  const onPickFile = () => fileInputRef.current?.click();

  /** üîí ÏµúÏ¥à Î†åÎçî Ïãú Ïª®ÌÖåÏù¥ÎÑà Ïã§Ï†ú Ìè≠ÏùÑ ÌîΩÏÖÄÎ°ú Í≥†Ï†ï (Î¶¨ÌîåÎ¶¨ÏºÄÏù¥Ìä∏ ÌÉ≠ Í∏∞Ï§Ä) */
  useLayoutEffect(() => {
    if (!fixedWidthPx && containerRef.current) {
      const px = Math.round(containerRef.current.getBoundingClientRect().width);
      if (px > 0) setFixedWidthPx(px);
    }
  }, [fixedWidthPx]);

  /** ÌÖúÌîåÎ¶ø Î∞è Í∏∞Î≥∏ ÏóîÏßÑ Î°úÎìú */
  useEffect(() => {
    const loadSettings = async () => {
      try {
        const [savedTemplate, savedEngine] = await Promise.all([
          window.api.getSetting("thumbnailPromptTemplate"),
          window.api.getSetting("thumbnailDefaultEngine"),
        ]);

        setMetaTemplate(savedTemplate || DEFAULT_TEMPLATE);

        if (savedEngine && !defaultEngineLoaded) {
          setProvider(savedEngine);
          setDefaultEngineLoaded(true);
        }
      } catch (error) {
        console.error("ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®:", error);
        setMetaTemplate(DEFAULT_TEMPLATE);
      } finally {
        setTemplateLoading(false);
      }
    };
    loadSettings();
  }, [defaultEngineLoaded]);

  /** ÏÑ§Ï†ï Î≥ÄÍ≤Ω Í∞êÏßÄ */
  useEffect(() => {
    const handleSettingsChanged = (payload) => {
      if (payload?.key === "thumbnailPromptTemplate") {
        setMetaTemplate(payload.value || DEFAULT_TEMPLATE);
      }
    };

    if (window.api.onSettingsChanged) {
      const unsubscribe = window.api.onSettingsChanged(handleSettingsChanged);
      return unsubscribe;
    }
  }, []);

  /** ÏïàÏ†ÑÌïú ÎØ∏Î¶¨Î≥¥Í∏∞ URL Ìï¥Ï†ú */
  useEffect(() => {
    return () => {
      if (previewUrlRef.current) {
        URL.revokeObjectURL(previewUrlRef.current);
        previewUrlRef.current = null;
      }
    };
  }, []);

  /** Toast ÏûêÎèô Ïà®ÍπÄ */
  useEffect(() => {
    if (!toast) return;
    const t = setTimeout(() => setToast(null), 1600);
    return () => clearTimeout(t);
  }, [toast]);

  /** Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù (Î©îÏù∏ ÌîÑÎ°úÏÑ∏Ïä§ Anthropic IPC) */
  const analyzeReference = async (file) => {
    if (!file || !window?.api?.imagefxAnalyze) return;
    try {
      setFxLoading(true);
      setFxErr("");
      setFxEn("");
      setFxKo("");
      setFxAnalysis("");

      const filePath = file.path || file.name; // ElectronÏùÄ path Ï†úÍ≥µ
      const res = await window.api.imagefxAnalyze({
        filePath,
        // Replicate Î™®ÎìúÏóêÏÑúÎäî Ïû•Î©¥ ÏÑ§Î™ÖÎèÑ Í∞ôÏù¥ ÎÑòÍ≤® Î≥¥Ï°∞,
        // Imagen Î™®ÎìúÏóêÏÑ† ÌÖúÌîåÎ¶ø Í∏∞Î∞òÏù¥ÎØÄÎ°ú descriptionÏùÄ ÏóÜÏñ¥ÎèÑ Îê®
        description: provider === "replicate" ? prompt.trim() || undefined : undefined,
      });
      if (!res?.ok) throw new Error(res?.message || "analysis_failed");

      // Íµ¨ÎèÑ Î∂ÑÏÑù Ï∂îÏ∂ú (Ï≤´ Î≤àÏß∏ Î∏îÎ°ù)
      const fullText = res.text || "";
      const analysisMatch = fullText.match(/Íµ¨ÎèÑ Î∂ÑÏÑù Î∞è Í∞úÏÑ†Ï†ê:([\s\S]*?)(?=English Prompt:|$)/);
      if (analysisMatch) {
        setFxAnalysis(analysisMatch[1].trim());
      }

      setFxEn(res.english || "");
      setFxKo(res.korean || "");
    } catch (e) {
      setFxErr(String(e?.message || e));
    } finally {
      setFxLoading(false);
    }
  };

  /** ÌååÏùº ÏÑ†ÌÉù Ï≤òÎ¶¨ */
  const onFile = (file) => {
    if (!file) return;

    // PNG/JPG/JPEGÎßå ÌóàÏö© (WEBP Ï†úÏô∏)
    if (!/image\/(png|jpe?g)$/i.test(file.type)) {
      return alert("PNG / JPG / JPEGÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§. (WEBP Î∂àÍ∞Ä)");
    }

    // ÌååÏùº ÌÅ¨Í∏∞ 10MB Ï†úÌïú
    if (file.size > MAX_UPLOAD_MB * 1024 * 1024) {
      return alert(`ÏµúÎåÄ ${MAX_UPLOAD_MB}MBÍπåÏßÄ ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.`);
    }

    setImageFile(file);

    if (previewUrlRef.current) {
      URL.revokeObjectURL(previewUrlRef.current);
      previewUrlRef.current = null;
    }
    const url = URL.createObjectURL(file);
    previewUrlRef.current = url;
    setImagePreview(url);

    // ÏóÖÎ°úÎìú ÏßÅÌõÑ Î∂ÑÏÑù
    analyzeReference(file);
  };

  const onDrop = (e) => {
    e.preventDefault();
    setDragOver(false);
    const file = e.dataTransfer.files?.[0];
    onFile(file);
  };

  /** ÏµúÏ¢Ö ÌîÑÎ°¨ÌîÑÌä∏ ÎßåÎì§Í∏∞ */
  const buildFinalPrompt = () => {
    const referenceAnalysis = (fxEn || "").trim();

    if (provider === "gemini") {
      // ‚úÖ Gemini: ÎåÄÌôîÌòï Ïù¥ÎØ∏ÏßÄ ÏÉùÏÑ±, ÌÖúÌîåÎ¶øÍ≥º Ï∞∏Í≥† Î∂ÑÏÑù ÌôúÏö©
      // {content}Îäî ÎπÑÏõåÎëêÍ≥† {referenceAnalysis}Îßå Ï£ºÏûÖ Í∞ÄÎä•
      const core = (metaTemplate || "")
        .replace(/{content}/g, "")
        .replace(/{referenceAnalysis}/g, referenceAnalysis)
        .trim();
      return core;
    }

    // ‚úÖ Replicate: Ïû•Î©¥ ÏÑ§Î™Ö + Í≥µÌÜµ ÌÇ§ÏõåÎìú + Î™®Îìú
    const base = (prompt || "").trim();
    let core = (metaTemplate || "")
      .replace(/{content}/g, base)
      .replace(/{referenceAnalysis}/g, referenceAnalysis)
      .trim();

    if (!core) core = base;

    const common = [
      "ultra-realistic",
      "cinematic style",
      "dramatic lighting",
      "16:9 aspect ratio",
      "no text, no words, no letters",
      "thumbnail-friendly framing",
    ];
    const mood =
      mode === "dramatic"
        ? ["high contrast", "emotional clarity", "tense atmosphere"]
        : ["soft lighting", "natural mood", "subtle color palette"];

    return `${core}\n\n${[...common, ...mood].join(", ")}`;
  };

  /** ÌîÑÎ°úÍ∑∏Î†àÏä§ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò */
  const updateProgress = (phase, current = 0, total = 0, message = "") => {
    const phaseMessages = {
      idle: "ÎåÄÍ∏∞ Ï§ë...",
      analyzing: "Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë...",
      generating: "Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± Ï§ë...",
      processing: "ÌõÑÏ≤òÎ¶¨ Ï§ë...",
      completed: "ÏôÑÎ£å!",
    };

    setProgress({
      phase,
      percentage: total > 0 ? Math.round((current / total) * 100) : 0,
      message: message || phaseMessages[phase] || "",
      current,
      total,
    });
  };

  /** ÏòàÏÉÅ ÏãúÍ∞Ñ Í≥ÑÏÇ∞ */
  const calculateEstimatedTime = () => {
    const preset = QUALITY_PRESETS.find((p) => p.value === qualityPreset);
    const baseTime = preset ? preset.steps * 0.5 : 15; // Í∏∞Î≥∏ 15Ï¥à
    return baseTime * count; // Í∞úÏàòÏóê ÎπÑÎ°Ä
  };

  /** ÏÉùÏÑ± Î≤ÑÌäº Ìï∏Îì§Îü¨ */
  const onGenerate = async () => {
    // ÌÖúÌîåÎ¶ø Î°úÎî© Ï§ëÏù∏ Í≤ΩÏö∞ ÎåÄÍ∏∞
    if (templateLoading) {
      setToast({ type: "error", text: "ÌÖúÌîåÎ¶øÏùÑ Î°úÎî© Ï§ëÏûÖÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî." });
      return;
    }

    // Í∞Å ÌîÑÎ°úÎ∞îÏù¥ÎçîÎ≥Ñ ÌïÑÏàò ÌïÑÎìú Í∞ÄÎìú
    if (provider === "replicate" && !prompt.trim() && !fxEn.trim() && !metaTemplate.trim()) {
      setToast({ type: "error", text: "Ïû•Î©¥ ÏÑ§Î™Ö ÎòêÎäî ÌÖúÌîåÎ¶ø/Î∂ÑÏÑù Í≤∞Í≥º Ï§ë ÌïòÎÇòÎäî ÌïÑÏöîÌï©ÎãàÎã§." });
      return;
    }
    if (provider === "gemini" && !metaTemplate.trim()) {
      setToast({ type: "error", text: "Gemini Î™®ÎìúÏóêÏÑúÎäî ÌÖúÌîåÎ¶øÏù¥ ÌïÑÏöîÌï©ÎãàÎã§." });
      return;
    }

    // IPC Í∞ÄÎìú
    const hasReplicate = !!window?.api?.generateThumbnails;
    const hasGemini = !!window?.api?.generateThumbnailsGemini;
    if (provider === "replicate" && !hasReplicate) {
      setToast({ type: "error", text: "Replicate ÏÑúÎπÑÏä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî." });
      return;
    }
    if (provider === "gemini" && !hasGemini) {
      setToast({ type: "error", text: "Gemini ÏÑúÎπÑÏä§Î•º ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî." });
      return;
    }

    setLoading(true);
    setResults([]);
    setTookMs(null);
    updateProgress("generating", 0, count);
    setEstimatedTime(calculateEstimatedTime());

    try {
      const started = Date.now();
      const finalPrompt = buildFinalPrompt();
      setUsedPrompt(finalPrompt);

      let res;
      if (provider === "gemini") {
        // ‚¨áÔ∏è Google Gemini Ìò∏Ï∂ú (count, aspectRatio ÏÇ¨Ïö©)
        updateProgress("generating", 0, count, "Gemini API Ï¥àÍ∏∞Ìôî Ï§ë...");
        const geminiApiKey = await window.api.getSecret("geminiKey");
        if (!geminiApiKey?.trim()) {
          throw new Error("Gemini API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÑ§Ï†ï > APIÏóêÏÑú ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
        }

        updateProgress("generating", 1, count, `${count}Í∞ú Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± Ï§ë...`);
        const preset = QUALITY_PRESETS.find((p) => p.value === qualityPreset);
        res = await window.api.generateThumbnailsGemini({
          prompt: finalPrompt,
          count,
          aspectRatio,
          apiKey: geminiApiKey,
          quality: preset ? { steps: preset.steps, cfg: preset.cfg } : undefined,
        });
      } else {
        // ‚¨áÔ∏è Replicate Ìò∏Ï∂ú (count, mode ÏÇ¨Ïö©)
        updateProgress("generating", 0, count, "Replicate API Ï¥àÍ∏∞Ìôî Ï§ë...");
        updateProgress("generating", 1, count, `${count}Í∞ú Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± Ï§ë...`);

        const preset = QUALITY_PRESETS.find((p) => p.value === qualityPreset);
        res = await window.api.generateThumbnails({
          prompt: finalPrompt,
          count,
          mode,
          quality: preset ? { steps: preset.steps, cfg: preset.cfg } : undefined,
        });
      }

      if (!res?.ok) {
        throw new Error(typeof res?.message === "string" ? res.message : JSON.stringify(res?.message));
      }

      const urls = Array.isArray(res.images) ? res.images : [];

      updateProgress("processing", count, count, "Í≤∞Í≥º Ï≤òÎ¶¨ Ï§ë...");
      setResults(urls.map((u) => ({ url: u })));
      setTookMs(Date.now() - started);

      updateProgress("completed", count, count);
      setTimeout(() => updateProgress("idle"), 3000);
    } catch (e) {
      console.error("Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± Ïã§Ìå®:", e);
      setToast({
        type: "error",
        text: `ÏÉùÏÑ± Ïã§Ìå®: ${e?.message || "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."}`,
      });
    } finally {
      setLoading(false);
      if (progress.phase !== "completed") {
        updateProgress("idle");
      }
    }
  };

  return (
    <div
      ref={containerRef}
      className={styles.container}
      style={
        fixedWidthPx
          ? {
              width: `${fixedWidthPx}px`,
              minWidth: `${fixedWidthPx}px`,
              maxWidth: `${fixedWidthPx}px`,
              flex: `0 0 ${fixedWidthPx}px`,
            }
          : {}
      }
    >
      {/* Toast ÏïåÎ¶º */}
      <div className={styles.toastContainer}>
        {toast && (
          <MessageBar intent={toast.type === "success" ? "success" : "error"}>
            <MessageBarBody>
              {toast.type === "success" ? "‚úÖ" : "‚ùå"} {toast.text}
            </MessageBarBody>
          </MessageBar>
        )}
      </div>

      {/* Ìó§Îçî */}
      {/* <div className={styles.sectionLead}>
        <Title2 style={{ fontSize: tokens.fontSizeBase500, marginBottom: tokens.spacingVerticalXXS }}>
          üé® Ïç∏ÎÑ§Ïùº ÏÉùÏÑ±Í∏∞
        </Title2>
        <Body1 style={{ color: tokens.colorNeutralForeground3, fontSize: tokens.fontSizeBase300 }}>
          AIÎ•º ÌôúÏö©Ìïú YouTube Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± ÎèÑÍµ¨ ¬∑ PNG, JPG, JPEG ÏßÄÏõê ¬∑ ÏµúÎåÄ {MAX_UPLOAD_MB}MB (WEBP Î∂àÍ∞Ä)
        </Body1>
      </div> */}

      <div className={styles.pageHeader}>
        <div className={styles.pageTitle}>
          <SparkleRegular />
          <Title1>Ïç∏ÎÑ§Ïùº ÏÉùÏÑ±Í∏∞</Title1>
        </div>
        <Body1 className={styles.pageDesc}>AIÎ•º ÌôúÏö©Ìïú YouTube Ïç∏ÎÑ§Ïùº ÏÉùÏÑ± ÎèÑÍµ¨</Body1>
        <div className={styles.hairline} />
      </div>

      {/* Ïû•Î©¥ ÏÑ§Î™Ö ‚Äî ReplicateÏóêÏÑúÎßå ÌëúÏãú */}
      {provider === "replicate" && (
        <Card className={styles.settingsCard}>
          <Field>
            <Label weight="semibold" size="large">
              <SparkleRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
              Ïû•Î©¥ ÏÑ§Î™Ö
            </Label>
            <Textarea
              rows={5}
              placeholder="Ïñ¥Îñ§ Ïç∏ÎÑ§ÏùºÏùÑ ÏõêÌïòÏãúÎÇòÏöî? Ïù∏Î¨ºÏùò ÌëúÏ†ï, ÏÉÅÌô©, Í∞êÏ†ïÏùÑ Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              style={{
                marginTop: tokens.spacingVerticalS,
                fontFamily: tokens.fontFamilyBase,
                fontSize: tokens.fontSizeBase300,
              }}
            />
          </Field>
        </Card>
      )}

      {/* Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú (Î∂ÑÏÑù Î≥¥Ï°∞) ‚Äî Îëê Î™®Îìú Í≥µÌÜµ ÏÇ¨Ïö© Í∞ÄÎä• */}
      <Card className={styles.settingsCard}>
        <Field>
          <Label weight="semibold" size="large">
            <ImageRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
            Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
          </Label>
          <div
            onDragOver={(e) => {
              e.preventDefault();
              setDragOver(true);
            }}
            onDragLeave={() => setDragOver(false)}
            onDrop={onDrop}
            className={`${styles.uploadArea} ${dragOver ? styles.uploadAreaDragOver : ""}`}
            onClick={onPickFile}
          >
            {imagePreview ? (
              <div className={styles.previewContainer}>
                <img src={imagePreview} alt="preview" className={styles.previewImage} />
                <div className={styles.previewInfo}>
                  <Body1 weight="semibold">{imageFile?.name}</Body1>
                  <Caption1>{(imageFile?.size / 1024 / 1024).toFixed(2)}MB</Caption1>
                  <div style={{ display: "flex", gap: tokens.spacingHorizontalS, marginTop: tokens.spacingVerticalS }}>
                    <Button
                      size="small"
                      appearance="outline"
                      icon={<DeleteRegular />}
                      onClick={(e) => {
                        e.stopPropagation();
                        setImageFile(null);
                        if (previewUrlRef.current) {
                          URL.revokeObjectURL(previewUrlRef.current);
                          previewUrlRef.current = null;
                        }
                        setImagePreview(null);
                        setFxEn("");
                        setFxKo("");
                        setFxErr("");
                      }}
                    >
                      Ï†úÍ±∞
                    </Button>
                    <Button
                      size="small"
                      appearance="outline"
                      disabled={!imageFile || fxLoading}
                      onClick={(e) => {
                        e.stopPropagation();
                        analyzeReference(imageFile);
                      }}
                    >
                      {fxLoading ? (
                        <>
                          <Spinner size="extra-small" /> Î∂ÑÏÑù Ï§ë‚Ä¶
                        </>
                      ) : (
                        "Î∂ÑÏÑù Îã§Ïãú Ïã§Ìñâ"
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            ) : (
              <div style={{ color: tokens.colorNeutralForeground2 }}>
                <div style={{ fontSize: "1.5rem", marginBottom: tokens.spacingVerticalS }}>‚¨ÜÔ∏è</div>
                <Body1>ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ÌïòÏó¨ ÏóÖÎ°úÎìú</Body1>
                <Caption1>PNG, JPG, JPEG (ÏµúÎåÄ {MAX_UPLOAD_MB}MB, WEBP Î∂àÍ∞Ä)</Caption1>
              </div>
            )}

            <input
              ref={fileInputRef}
              type="file"
              accept="image/png,image/jpeg" // webp Ï†úÏô∏
              style={{ display: "none" }}
              onChange={(e) => onFile(e.target.files?.[0])}
            />
          </div>
        </Field>

        {(fxLoading || fxErr || fxEn || fxKo || fxAnalysis) && (
          <div className={styles.analysisResult}>
            {fxErr && (
              <div className={`${styles.statusMessage} ${styles.errorMessage}`}>
                <DismissCircleRegular />
                <Caption1>ÏóêÎü¨: {fxErr}</Caption1>
              </div>
            )}
            {fxLoading && !fxErr && (
              <div style={{ display: "flex", alignItems: "center", gap: tokens.spacingHorizontalS }}>
                <Spinner size="small" />
                <Caption1>Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù Ï§ë‚Ä¶</Caption1>
              </div>
            )}
            {fxAnalysis && (
              <Card
                style={{
                  backgroundColor: tokens.colorPaletteLightTealBackground1,
                  border: `1px solid ${tokens.colorPaletteLightTealBorder1}`,
                  padding: tokens.spacingVerticalM,
                  marginBottom: tokens.spacingVerticalM,
                }}
              >
                <Label
                  weight="semibold"
                  style={{
                    marginBottom: tokens.spacingVerticalS,
                    display: "flex",
                    alignItems: "center",
                    color: tokens.colorPaletteDarkBlueForeground2,
                  }}
                >
                  <InfoRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
                  üìä Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑù
                </Label>
                <div
                  style={{
                    backgroundColor: tokens.colorNeutralBackground1,
                    padding: tokens.spacingVerticalM,
                    borderRadius: tokens.borderRadiusSmall,
                    border: `1px solid ${tokens.colorNeutralStroke1}`,
                    fontFamily: tokens.fontFamilyBase,
                    lineHeight: "1.8",
                  }}
                >
                  {fxAnalysis
                    .split("\n")
                    .map((line, index) => {
                      if (line.trim().startsWith("‚Ä¢") || line.trim().startsWith("-")) {
                        return (
                          <div
                            key={index}
                            style={{
                              marginBottom: tokens.spacingVerticalXS,
                              paddingLeft: tokens.spacingHorizontalS,
                              color: tokens.colorNeutralForeground1,
                            }}
                          >
                            <Body1>{line.trim()}</Body1>
                          </div>
                        );
                      } else if (line.trim()) {
                        return (
                          <div
                            key={index}
                            style={{
                              marginBottom: tokens.spacingVerticalS,
                              fontWeight: tokens.fontWeightSemibold,
                              color: tokens.colorNeutralForeground1,
                            }}
                          >
                            <Body1>{line.trim()}</Body1>
                          </div>
                        );
                      }
                      return null;
                    })
                    .filter(Boolean)}
                </div>
              </Card>
            )}
          </div>
        )}

        <TipCard className={styles.tipCard}>
          <InfoRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
          Ï∞∏Í≥† Ïù¥ÎØ∏ÏßÄ Î∂ÑÏÑùÏùÑ ÌÖúÌîåÎ¶øÏóê Ï£ºÏûÖÌïòÎ©¥ ÏùºÍ¥ÄÏÑ±Ïù¥ Ï¢ãÏïÑÏßëÎãàÎã§.
        </TipCard>
      </Card>

      {/* ÏòµÏÖòÎì§ */}
      <Card className={styles.settingsCard}>
        <Title3 style={{ marginBottom: tokens.spacingVerticalM, display: "flex", alignItems: "center" }}>
          <SettingsRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
          ÏÉùÏÑ± ÏòµÏÖò
        </Title3>
        <div className={styles.optionsGrid}>
          {/* Í≥µÌÜµ: ÏÉùÏÑ± Í∞úÏàò */}
          <Field>
            <Label weight="semibold">ÏÉùÏÑ± Í∞úÏàò</Label>
            <Dropdown value={count.toString()} onOptionSelect={(_, data) => setCount(Number(data.optionValue))}>
              {[1, 2, 3, 4].map((n) => (
                <Option key={n} value={n.toString()}>
                  {n}Í∞ú
                </Option>
              ))}
            </Dropdown>
          </Field>

          {/* ÌíàÏßà ÏÑ§Ï†ï */}
          <Field>
            <Label weight="semibold">
              <SettingsRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
              ÌíàÏßà ÏÑ§Ï†ï
            </Label>
            <Dropdown value={qualityPreset} onOptionSelect={(_, data) => setQualityPreset(data.optionValue)}>
              {QUALITY_PRESETS.map((preset) => (
                <Option key={preset.value} value={preset.value}>
                  <div>
                    <div style={{ fontWeight: tokens.fontWeightSemibold }}>{preset.label}</div>
                    <Caption1>
                      {preset.description} ‚Ä¢ {preset.estimatedTime}
                    </Caption1>
                  </div>
                </Option>
              ))}
            </Dropdown>
          </Field>

          {/* Î∂ÑÍ∏∞ ÏòµÏÖò */}
          {provider === "replicate" ? (
            <Field>
              <Label weight="semibold">ÏÉùÏÑ± Î™®Îìú</Label>
              <Dropdown value={mode} onOptionSelect={(_, data) => setMode(data.optionValue)}>
                <Option value="dramatic">Í∑πÏ†Å & ÏûêÍ∑πÏ†Å Î™®Îìú</Option>
                <Option value="calm">Ï∞®Î∂Ñ & ÏûêÏó∞Ïä§Îü¨Ïö¥ Î™®Îìú</Option>
              </Dropdown>
            </Field>
          ) : (
            <Field>
              <Label weight="semibold">Í∞ÄÎ°úÏÑ∏Î°ú ÎπÑÏú® (ImageFX)</Label>
              <Dropdown value={aspectRatio} onOptionSelect={(_, data) => setAspectRatio(data.optionValue)}>
                {["1:1", "3:4", "4:3", "9:16", "16:9"].map((r) => (
                  <Option key={r} value={r}>
                    {r}
                  </Option>
                ))}
              </Dropdown>
            </Field>
          )}
        </div>
      </Card>

      {/* ÏÉùÏÑ± Î≤ÑÌäº */}
      <Card className={styles.settingsCard}>
        <Button
          appearance="primary"
          size="large"
          onClick={onGenerate}
          disabled={loading}
          icon={loading ? <Spinner size="small" /> : <SparkleRegular />}
          style={{
            width: "100%",
            height: "56px",
            fontSize: tokens.fontSizeBase400,
            fontWeight: tokens.fontWeightSemibold,
          }}
        >
          {loading ? "ÏÉùÏÑ± Ï§ë..." : "üé® Ïç∏ÎÑ§Ïùº ÏÉùÏÑ±ÌïòÍ∏∞"}
        </Button>
      </Card>

      {/* ÌîÑÎ°úÍ∑∏Î†àÏä§ ÌëúÏãú */}
      {progress.phase !== "idle" && (
        <Card style={{ marginTop: tokens.spacingVerticalL, padding: tokens.spacingVerticalM }}>
          <div style={{ marginBottom: tokens.spacingVerticalS }}>
            <Body1 weight="semibold">{progress.message}</Body1>
            {estimatedTime && progress.phase === "generating" && (
              <Caption1 style={{ color: tokens.colorNeutralForeground3 }}>
                <TimerRegular style={{ marginRight: tokens.spacingHorizontalXS }} />
                ÏòàÏÉÅ ÏÜåÏöî ÏãúÍ∞Ñ: ÏïΩ {estimatedTime}Ï¥à
              </Caption1>
            )}
          </div>
          <ProgressBar value={progress.percentage / 100} color={progress.phase === "completed" ? "success" : "brand"} />
          {progress.total > 0 && (
            <Caption1 style={{ marginTop: tokens.spacingVerticalXS, textAlign: "right" }}>
              {progress.current} / {progress.total} ÏôÑÎ£å
            </Caption1>
          )}
        </Card>
      )}

      {/* Í≤∞Í≥º */}
      {results.length > 0 && (
        <div style={{ marginTop: tokens.spacingVerticalXXL }}>
          <div style={{ display: "flex", alignItems: "center", gap: tokens.spacingHorizontalS, marginBottom: tokens.spacingVerticalM }}>
            <span>üéâ</span>
            <Title3>ÏÉùÏÑ± ÏôÑÎ£å!</Title3>
            {tookMs != null && (
              <Caption1>
                {(tookMs / 1000).toFixed(1)}Ï¥à ÎßåÏóê {results.length}Í∞úÏùò Ïç∏ÎÑ§ÏùºÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.
              </Caption1>
            )}
          </div>

          <div className={styles.resultsGrid}>
            {results.map((r, i) => (
              <Card key={i} className={styles.resultCard}>
                <div style={{ backgroundColor: "rgba(0,0,0,0.05)" }}>
                  <img src={r.url} alt={`thumb-${i + 1}`} className={styles.resultImage} />
                </div>
                <div className={styles.resultFooter}>
                  <Body1 weight="semibold">Ïç∏ÎÑ§Ïùº #{i + 1}</Body1>
                  <div className={styles.resultActions}>
                    <Button
                      size="small"
                      appearance="outline"
                      icon={<ArrowDownloadRegular />}
                      onClick={async () => {
                        const res = await window.api.saveUrlToFile({
                          url: r.url,
                          suggestedName: `thumbnail-${i + 1}.jpg`,
                        });
                        if (!res?.ok && res?.message !== "canceled") {
                          setToast({ type: "error", text: `Ï†ÄÏû• Ïã§Ìå®: ${res?.message || "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò"}` });
                        } else if (res?.ok) {
                          setToast({ type: "success", text: "Ïç∏ÎÑ§ÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!" });
                        }
                      }}
                    >
                      Îã§Ïö¥Î°úÎìú
                    </Button>
                    <Button size="small" appearance="outline" icon={<OpenRegular />} as="a" href={r.url} target="_blank" rel="noreferrer">
                      ÏÉà Ï∞ΩÏóêÏÑú Î≥¥Í∏∞
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          <div style={{ marginTop: tokens.spacingVerticalL }}>
            <Body1 weight="semibold" style={{ marginBottom: tokens.spacingVerticalS }}>
              üß© ÏÉùÏÑ±Ïóê ÏÇ¨Ïö©Îêú ÌîÑÎ°¨ÌîÑÌä∏
            </Body1>
            <div className={styles.promptDisplay}>{usedPrompt}</div>
          </div>
        </div>
      )}
    </div>
  );
}

export default function ThumbnailGeneratorWithErrorBoundary() {
  return (
    <ErrorBoundary>
      <ThumbnailGenerator />
    </ErrorBoundary>
  );
}
